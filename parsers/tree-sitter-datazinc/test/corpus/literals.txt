======
Absent
======

is_absent = <>;

---

(source_file
  (assignment (identifier) (absent)))

========
Infinity
========

word = infinity;
utf8 = ∞;

---

(source_file
  (assignment (identifier) (infinity))
  (assignment (identifier) (infinity)))

=====
Array
=====

empty = [];
single = [1.0];
double = [1, 2.2];
more = [<>, <>, 1, 2];

---

(source_file
  (assignment (identifier) (array_literal))
  (assignment (identifier) (array_literal
    (array_literal_member (float_literal))))
  (assignment (identifier) (array_literal
    (array_literal_member (integer_literal))
    (array_literal_member (float_literal))))
  (assignment (identifier) (array_literal
    (array_literal_member (absent))
    (array_literal_member (absent))
    (array_literal_member (integer_literal))
    (array_literal_member (integer_literal)))))

=============
Indexed Array
=============

single = [2: 1.0];
double = [2: 1, 3: 2.2];
start = [0: 1, 2.2, <>, 2];
multi = [(1, 2): 1.1, (3, 4): 2.2];

---

(source_file
  (assignment (identifier) (array_literal
    (array_literal_member (integer_literal) (float_literal))))
  (assignment (identifier) (array_literal
    (array_literal_member (integer_literal) (integer_literal))
    (array_literal_member (integer_literal) (float_literal))))
  (assignment (identifier) (array_literal
    (array_literal_member (integer_literal) (integer_literal))
    (array_literal_member (float_literal))
    (array_literal_member (absent))
    (array_literal_member (integer_literal))))
  (assignment (identifier) (array_literal
    (array_literal_member (tuple_literal (integer_literal) (integer_literal)) (float_literal))
    (array_literal_member (tuple_literal (integer_literal) (integer_literal)) (float_literal)))))

========
2D Array
========

empty = [||];
single = [| 1.0 |];
row = [| 1, 2.2 |];
col = [| 1 | 2.2 |];
multi = [| 1, 2.2, 3 | 4.4, <>, 6 | <>, 1, 9.9 |];

---

(source_file
  (assignment (identifier) (array_literal_2d))
  (assignment (identifier) (array_literal_2d
    (array_literal_2d_row (float_literal))))
  (assignment (identifier) (array_literal_2d
    (array_literal_2d_row (integer_literal) (float_literal))))
  (assignment (identifier) (array_literal_2d
    (array_literal_2d_row (integer_literal))
    (array_literal_2d_row (float_literal))))
  (assignment (identifier) (array_literal_2d
    (array_literal_2d_row (integer_literal) (float_literal) (integer_literal))
    (array_literal_2d_row (float_literal) (absent) (integer_literal))
    (array_literal_2d_row (absent) (integer_literal) (float_literal)))))

================
2D Indexed Array
================

empty = [| 1: 2: |];
cols = [| 3: 4:
        | 1, 2
        | 3, 4 |];
rows = [| 5: 0, <>
        | 6: 1, 1.5 |];
both = [|    A: B:
        | C: 0, 0
        | D: 1, 2 |];

---

(source_file
  (assignment (identifier) (array_literal_2d
    (integer_literal)
    (integer_literal)))
  (assignment (identifier) (array_literal_2d
    (integer_literal)
    (integer_literal)
    (array_literal_2d_row (integer_literal) (integer_literal))
    (array_literal_2d_row (integer_literal) (integer_literal))))
  (assignment (identifier) (array_literal_2d
    (array_literal_2d_row (integer_literal) (integer_literal) (absent))
    (array_literal_2d_row (integer_literal) (integer_literal) (float_literal))))
  (assignment (identifier) (array_literal_2d
    (identifier)
    (identifier)
    (array_literal_2d_row (identifier) (integer_literal) (integer_literal))
    (array_literal_2d_row (identifier) (integer_literal) (integer_literal)))))

=======
Boolean
=======

boolean_id = false;
boolean_id = true;

---

(source_file
  (assignment (identifier) (boolean_literal))
  (assignment (identifier) (boolean_literal)))

======
Number
======

simple_float = 3.65;
exponent_float = 4.5e10;
simple_exponent_float = 5E-10;
negative_float = -2.2;

decimal_integer = 123;
hexadecimal_integer = 0xA23F;
octal_integer = 0o701;
binary_integer = 0b00110101;
negative_integer = -234;

---

(source_file
  (assignment (identifier) (float_literal))
  (assignment (identifier) (float_literal))
  (assignment (identifier) (float_literal))
  (assignment (identifier) (float_literal))
  (assignment (identifier) (integer_literal))
  (assignment (identifier) (integer_literal))
  (assignment (identifier) (integer_literal))
  (assignment (identifier) (integer_literal))
  (assignment (identifier) (integer_literal)))

======
Ranges
======

int_set = 4..32;
neg = -22..-1;
float_set = 4.0..32.3;
enum_set = X..Y(Z);
range_list = 1..4 union 6..8;

---

(source_file
  (assignment (identifier) (infix_operator (integer_literal) (integer_literal)))
  (assignment (identifier) (infix_operator (integer_literal) (integer_literal)))
  (assignment (identifier) (infix_operator (float_literal) (float_literal)))
  (assignment (identifier) (infix_operator (identifier) (call (identifier) (identifier))))
  (assignment (identifier) (infix_operator (infix_operator (integer_literal) (integer_literal)) (infix_operator (integer_literal) (integer_literal)))))

===
Set
===

empty = {};
empty_utf8 = ∅;
single = {1.0};
double = {1, 2.2};
more = {<>, <>, 1, <>};
enum_set = {X, Y(Z)};

---

(source_file
  (assignment (identifier) (set_literal))
  (assignment (identifier) (set_literal))
  (assignment (identifier) (set_literal (float_literal)))
  (assignment (identifier) (set_literal (integer_literal) (float_literal)))
  (assignment (identifier) (set_literal (absent) (absent) (integer_literal) (absent)))
  (assignment (identifier) (set_literal (identifier) (call (identifier) (identifier)))))

======
String
======

empty_string = "";
small_string = "test";
spaced_string = "    Another test    ";
escaped_string = "\t\n";

---

(source_file
  (assignment (identifier) (string_literal))
  (assignment (identifier) (string_literal (string_characters)))
  (assignment (identifier) (string_literal (string_characters)))
  (assignment (identifier) (string_literal (escape_sequence) (escape_sequence))))

=====
Tuple
=====

one = (<>,);
two = (1, "foo");
three = (2.5, true, <>);
compound = ([1, 2], {3, 4}, 5);
nested = (1, (2, (4, 5)), 6);

---

(source_file
  (assignment (identifier) (tuple_literal (absent)))
  (assignment (identifier) (tuple_literal (integer_literal) (string_literal (string_characters))))
  (assignment (identifier) (tuple_literal (float_literal) (boolean_literal) (absent)))
  (assignment (identifier) (tuple_literal (array_literal (array_literal_member (integer_literal)) (array_literal_member (integer_literal))) (set_literal (integer_literal) (integer_literal)) (integer_literal)))
  (assignment (identifier) (tuple_literal (integer_literal) (tuple_literal (integer_literal) (tuple_literal (integer_literal) (integer_literal))) (integer_literal))))

======
Record
======

simple = (a: 1, b: 2.5);
compound = (a: {1, 2}, b: (3.5, true), c: [<>]);
nested = (a: 1, b: (c: 2, d: (e: 3, f: 4)));

---

(source_file
  (assignment (identifier) (record_literal (record_member (identifier) (integer_literal)) (record_member (identifier) (float_literal))))
  (assignment (identifier) (record_literal (record_member (identifier) (set_literal (integer_literal) (integer_literal))) (record_member (identifier) (tuple_literal (float_literal) (boolean_literal))) (record_member (identifier) (array_literal (array_literal_member (absent))))))
  (assignment (identifier) (record_literal (record_member (identifier) (integer_literal)) (record_member (identifier) (record_literal (record_member (identifier) (integer_literal)) (record_member (identifier) (record_literal (record_member (identifier) (integer_literal)) (record_member (identifier) (integer_literal)))))))))

===============
Enum Definition
===============

simple_names = {A, B, C};
int_constructor = X(1..5);
set_lit_arg = X({1,3,5});
range_list_arg = X(1..3 union 5..10);
concat_constr = {X} ++ Y(Z); 

---

(source_file
  (assignment (identifier) (set_literal (identifier) (identifier) (identifier)))
  (assignment (identifier) (call (identifier) (infix_operator (integer_literal) (integer_literal))))
  (assignment (identifier) (call (identifier) (set_literal (integer_literal) (integer_literal) (integer_literal))))
  (assignment (identifier) (call (identifier) (infix_operator (infix_operator (integer_literal) (integer_literal)) (infix_operator (integer_literal) (integer_literal)))))
  (assignment (identifier) (infix_operator (set_literal (identifier)) (call (identifier) (identifier)))))
